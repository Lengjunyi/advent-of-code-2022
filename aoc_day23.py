input = """.##.#.....##.#.......#..#####....#####...#..###..#.#..#...#.##...###.##.#
....##..##..........##.#..#.##...#.#.#...##..#..#####.#..#..#.#..#..####.
#.####.##..##.##.#####.#####...#.....#...####..##.##..###..##..#####..#..
..###.#.##....#.###.#..#####..##.####..###.####.######....###.#####...#..
#.#..#..#....#...####.#.....##..#.###.....##.#.#...#.#.##.######.#.#...##
....##..####..#.#...##....##.#.#...##..##..#....#..####.#.#########.....#
.#.###.##....#####.###..#.#......#.####.#....#.######.##..##...#####.##..
...######..##..#####.###.#.......##.#.#..######.###.##..#.##......#.##.#.
.#..######.#.##..##.#.###.####.#.#.#..##.###..#.##..#..#..#.###...#.#.###
.#.#.#...#.###..#..###.#.#...###.#####..#.##.#...#....###.##..#..#######.
####.#.###....###....#.#..##.......###.#.##.#....#..#........#..##...##.#
#..#...##.........#.#.####..####.####.#..####.....#....##..#..##.####...#
#...##..#...#..#.#.###.#.#.##..####....#######..####..#..#.##.#.####.##..
..##.##.##....#..##.###.#.#.#.#..####..##.#.#....##..###.#..#.#.#.#.....#
####.#.#..#..####.#.####.#.#..#...##...#.#..###.##......#....##.....##...
.#..##..##.....#.#.#.##..##..####.#.#.###.###.#...#..##....#...##..#.##..
#.#...#.##.#..#...#.##.#####...#..#..###....###...##.#.#...#.#######...##
#.##.#...#...###.###.#.######..##.####.#.###.##..#....#.#.#.#..#.#.####.#
.##.#.##.####.#.##..#.#.....##..##.#..#..#.#...####..#..#.#.#.....#####..
.#.#.#....#..##.##.####.###.#...###..#.#.#....##..##..#...#..##.#.##...##
###....#.#.##...###..##...#.#...#..#.###..#.###.##..#.....#.#.#.#.####...
##..##...###..##..###.###.##.######.##.......#..#....#.#.#..###.#.###.##.
#.#####..#####.....#.##.#.#..###..###.#...#.####.#.#.##.####.#.#..#....##
#.#.#...##...#.###..#.#####.#.##....#..#..##.##..###....#.####...##......
.....#.#####.....#.##...###.##.#..#.####.####........####.#.##..##.###.#.
.....#.###.#.#.##..##.###..###.#####......###..##....#.......##..#....#.#
###.#..#.##...#.###.#####.....#..####.####.###.....#.#..#....##.#...####.
#####.##.###.#.###.####....##.#.#.##....#.##.##......##.#.###..###.##.#.#
.###.##.#.#.#.#..#.#..#.##......##.#.###...#####..#.##.....#.#.##....##.#
#..###..#...#####..####...###.#.#.#.###.#..####..#.#.#....#.#.#.#...##.##
#..#.###.#....#....#..##.#..#......#..#.##.......#.#.#.#.####..#.##.##.##
..###.####.##..#...##.#..##.##.###......#..#.###..#..##.#..#####....#...#
.#.##..###...###.#..###.######.#...######..#..##.####.###.#.####..####.##
.#.###.##..##.####..####.#....####.###.###.##.##########.#...#.#....#....
.....#.#....###..#..##.##..###..#...#..##...##.##....##...#.##..##..#...#
.....##..#######...#..#..#.####.#.#...#...##...##.##.#...#..###.#...#.##.
..#.#####.#.#.#..##..#....########.##..#.#.###...#.####..#.......#..#...#
#.##....###.##..##.....#..##..###..###.#..#.#.##.#..#....#......#####.#.#
....#.##...#......####..#.####.#..#.#....#.#.#...##..##.##..#..#..##.#.#.
.##.#....#.#...#..##...##..#..#..##.#.#..##..#..#.##..#.....#####..##.#.#
##.#.########..#.#######..####.#..##..###.#..#.#.####.##.....#.#...#...#.
..#...#..##..#.##.###..####.###....#..#.........###..##..##.#..#...#.#.#.
.#.##....#.#..##.#..######.##..#...##....#.###..###.#.#..#.#.####..#...##
#.##.#.#.#.#..#.#..#####..#..#####...#..##..######.######.#.#..####....##
...##..#....##...##...#....#.##.....###.##....#..#...#.#.#..#..#..#..#..#
#.##..##.....#.#.##...#..##.#......#...#..#######.##..##....#.##..###..##
##...##..#...#.#.#..#.##.#.###.#..#..#######..######..#....###..#.#.###..
.....##.#....##..........#....##..#.##....##..#..#.###.#...##..##.#...##.
#.#.###.#.#..#..#..#.#.#..#..#.####..##..#..###.#..#..#.#.###..#.#..#....
#..##.#..##..#...#...#....#..#..###..##..#..#..#.#..#..#....#.#..####.##.
#..####.####.###.#..#..#..####..###..#..#.#.#..##..#..#......######.....#
#....####.....##..####....#....#.#...#..#.####...##.##.#.###..##.###.####
..####.#..#.####.##....##########....###.####.##..##......#.##.#..#..####
.#.#...#.#.##.##.....##..#....#.#...#.#..#...#..###..#....##..#....#.#.##
##....#.#......##..#.#.#......##...#...#.#..##...#....###.##....#.##.....
###.#..##.#.####....#...##.....###.....#..#.#...#.#.##....##.#..##.#.#..#
.#.##.#.....#.#######...#.##...##..###.#.#.##.####.....###..#.##.##.###.#
#.###.###..#######.#..#..##.####.###...####..#..###.#.##....#....##..####
#..##.###.#.#.####.##..##.##.#.#........##....#...###..#.###....##.......
.###.#.##..#.#..########....#.##........#.#.....#.#.##.#####.#..######...
#.#.#..###.##..###.#.##..##.#.#######...#...###.#.#.##..#..####..#..#####
#.####.##.#.###..##.#..##.....###.#######.###...######..##....#.#..#####.
.##.##.######.#..##...##..###..####...##....#.####.###.#...##..#####...##
####..#.####.#..###.#....##..#.#....##.#.###.....#...#..#..#..##...#..##.
.#.##.....##.#.#.#..#.#...##.#####...#...#..###...#..####.#...#..###...##
#.###.##...##.#.#..#.#.####...#.#.##..#.#..###.##.#..#..##.#.#.##.#..###.
#..####.#.#..##..#...#..#.#.#....#..#.#####.....#..#.....#.#.##.#.#..#.##
.#..###.#...#..#.#.####.#..#.#.#.....#...#.#.#..###...##.#..########.....
.#.#....##.###.#.#.#.######...#.#.######.#.#.####.##..#.#..#..####.#.#...
##.#.###.###.#####...##.#..#.####.#...#..#......###.##..##.#.#.....#..#..
.##....###.#.....###...####..#....#.#.#..#####.#.#..#.###..#.....#.#.###.
..#..#.#..##..#..#...#.#....#.##..##.######.###...##..#.#####...#.##.##..
.#.##.#..#..###...#####.##.....###.####...#...###....##.#.#.#..##...#..##"""


graph = set()

for (i, line) in enumerate(input.split("\n")):
    for (j, c) in enumerate(line):
        if c == "#":
            graph.add((j, i))

directions = [1, 5, 7, 3]
for i in range(2000):
    xs = [-1, 0, 1, 1, 1, 0, -1, -1]
    ys = [-1, -1, -1, 0, 1, 1, 1, 0]
    def next(x, y):
        for dir in range(8):
            if (x+xs[dir],y+ys[dir]) in graph:
                d = None
                for d in directions:
                    if not any([(x+xs[k],y+ys[k]) in graph for k in [d-1, d, (d+1)%8]]):
                        return x+xs[d], y+ys[d]
                return x,y
        return x,y

    nexts = {(x,y):next(x,y) for (x,y) in graph}
    
    from collections import Counter
    counter = Counter()
    for (x, y) in graph:
        counter[nexts[(x,y)]] += 1
    
    ng = set()
    for (x, y) in graph:
        if counter[nexts[(x,y)]] == 1:
            ng.add(nexts[(x,y)])
        else:
            ng.add((x,y))
    
    if graph == ng:
        print(i+1)
        exit()

    graph = ng
    directions = directions[1:] + directions[:1]

    if i+1 == 10:
        xs = [x for (x,_) in graph]
        ys = [y for (_,y) in graph]
        print((max(xs)-min(xs)+1)*(max(ys)-min(ys)+1)-len(graph))
